.\"
.\" Please keep file format as follows:
.\" -- Lines should be no longer than 75 characters
.\" -- All nested structures should be commented at their beginning and end
.\" -- All codeblocks should be commented at their beginning and end
.\" -- If the file contains a lot of formatting, keep paragraphs or other 
.\"    logical parts separated by a commented out line and/or comment their
.\"    beginnings and ends
.\" 
.\"  For vim users:
.\" 
.\"  au BufNewFile,BufRead *.mdoc set filetype=groff
.\"  au BufNewFile,BufRead *.mdoc match ErrorMsg '\%>75v.\+'
.\"
.Sh The Virtual Desktop
.Nm
provides multiple virtual desktops for users who wish to use them.
The screen is a viewport onto a
.Em desktop
which may be larger than the screen.
Several distinct desktops can be accessed (concept: one desktop for each
project, or one desktop for each application, when view applications are
distinct).
Since each desktop can be larger than the physical screen, divided into m
by n
.Em pages
which are each the size of the physical screen, windows which are larger 
than the screen or large groups of related windows can easily be viewed.
.Pp
The (m by n) size (i.e. number of pages) of the virtual desktops can be 
changed any time, by using the
.Sx DesktopSize
command.
All virtual desktops must be (are) the same size.
The total number of distinct desktops does not need to be specified, but is
limited to approximately 4 billion total. All windows on a range of desktops
can be viewed in the
.Sx FvwmPager
,
a miniature view of the desktops.
The pager is an accessory program, called a module, which is not essential
for the window manager to operate.
Windows may also be listed, along with their geometries, in a window list,
accessible as a pop-up menu, or as a separate window, called the
.Sx FvwmWinList
(another module).
.Pp
.Nm
keeps the windows on the desktop in a layered stacking order; a window in a
lower layer never obscures a window in a higher layer.
The layer of a window can be changed by using the 
.Sx Layer
command.
The concept of layers is a generalization of the
.Sx StaysOnTop
flag of older 
.Nm
versions. The
.Sx StaysOnTop
and
.Sx StaysPut
.Sx Style
options are now implemented by putting the windows in suitable layers and 
the previously missing
.Sx StaysOnBottom
.Sx Style
option has been added.
.Sx Sticky
windows are windows which transcend the virtual desktop by "Sticking to the
screen's glass".
They always stay put on the screen. This is convenient for things like
clocks and xbiffs, so you only need to run one such gadget and it always
stays with you. Icons can also be made to stick to the glass, if desired.
.Pp
Window geometries are specified relative to the current viewport.
That is:
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
xterm -geometry +0+0
.\" END CODEBLOCK
.Ed
creates a window in the upper left hand corner of the visible portion of 
the screen.
It is permissible to specify geometries which place windows on the virtual
desktop, but off the screen.
For example, if the visible screen is 1000 by 1000 pixels, and the desktop
size is 3x3, and the current viewport is at the upper left hand corner of
the desktop, invoking:
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
xterm -geometry +1000+1000
.\" END CODEBLOCK
.Ed
places a window just off of the lower right hand corner of the screen.
It can be found by moving the mouse to the lower right hand corner of the 
screen and waiting for it to scroll into view.
A geometry specified as something like:
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
xterm -geometry -5-5
.\" END CODEBLOCK
.Ed
places the window's lower right hand corner 5 pixels from the lower right 
corner of the visible portion of the screen.
Not all applications support window geometries with negative offsets.
Some applications place the window's upper right hand corner 5 pixels above
and to the left of the upper left hand corner of the screen; others may do
just plain bizarre things.
.Pp
There are several ways to cause a window to map onto a desktop or page 
other than the currently active one.
The geometry technique mentioned above (specifying x,y coordinates larger
than the physical screen size), however, suffers from the limitation of
being interpreted relative to the current viewport: the window may not
consistently appear on a specific page, unless you always invoke the
application from the same page.
.Pp
A better way to place windows on a different page, screen or desk from the
currently mapped viewport is to use the
.Sx StartsOnPage
or
.Sx StartsOnScreen
style specification (the successors to the older
.Sx StartsOnDesk
) in your
.Em config
file.
The placement is consistent: it does not depend on your current location on
the virtual desktop.
.Pp
Some applications that understand standard Xt command line arguments and X
resources, like xterm and xfontsel, allow the user to specify the start-up
desk or page on the command line:
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
xterm -xrm "*Desk:1"
.\" END CODEBLOCK
.Ed
starts an xterm on desk number 1;
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
xterm -xrm "*Page:3 2 1"
.\" END CODEBLOCK
.Ed
starts an xterm two pages to the right and one down from the upper left 
hand page of desk number 3. Not all applications understand the use of 
these options, however.
You could achieve the same results with the following lines in your
.Pa .Xdefaults
file:
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
XTerm*Desk: 1
.\" END CODEBLOCK
.Ed
or
.\" BEGIN CODEBLOCK
.Bd -literal -offset indent -compact
XTerm*Page: 3 2 1
.\" END CODEBLOCK
.Ed
typedefs ending in ``_t'', except as specified in Standard C or by POSIX.
